- name: Load new database backup
  hosts: localhost
  gather_facts: no
  vars:
    - archives_dir: '{{ archives | default("/home/odoo/archives") }}'
    - svc: '{{ service | default("odoo") }}'
  tasks:
  - name: Get PostgreSQL host
    shell: grep "db_host" /etc/{{ svc }}/{{ svc }}.conf | sed -e 's/db_host = //g'
    register: pghost

  - name: Get PostgreSQL port
    shell: grep "db_port" /etc/{{ svc }}/{{ svc }}.conf | sed -e 's/db_port = //g'
    register: pgport

  - name: Get PostgreSQL user
    shell: grep "db_user" /etc/{{ svc }}/{{ svc }}.conf | sed -e 's/db_user = //g'
    register: pguser

  - name: Get PostgreSQL password
    shell: grep "db_password" /etc/{{ svc }}/{{ svc }}.conf | sed -e 's/db_password = //g'
    register: pgpassword

  - name: Drop DB
    postgresql_db:
      name: BACKUP
      login_host: "{{ db_host }}"
      login_user: "{{ db_user }}"
      login_password: "{{ pgpassword.stdout }}"
      state: absent

  - name: Create DB
    postgresql_db:
      name: BACKUP
      login_host: "{{ db_host }}"
      login_user: "{{ db_user }}"
      login_password: "{{ pgpassword.stdout }}"

  - name: Get dumps
    find:
      paths: "{{ archives_dir }}"
      patterns: '*.sql.bz2'
      recurse: yes
    register: found_files

  - name: Get latest dump
    set_fact:
      latest_file: "{{ found_files.files | sort(attribute='mtime') | last }}"

  - name: Load DB
    shell: zcat {{ latest_file.path }} | psql -h {{ db_host }} -U {{ db_user }} BACKUP
    environment:
      PGPASSWORD: '{{ pgpassword.stdout }}'

  - name: Archive the scheduled actions
    postgresql_query:
      port: "{{ pgport.stdout }}"
      login_host: "{{ pghost.stdout }}"
      login_user: "{{ pguser.stdout }}"
      login_password: "{{ pgpassword.stdout }}"
      db: BACKUP
      query: UPDATE ir_cron SET active = 'f'

  - name: Archive outgoing mail servers
    postgresql_query:
      port: "{{ pgport.stdout }}"
      login_host: "{{ pghost.stdout }}"
      login_user: "{{ pguser.stdout }}"
      login_password: "{{ pgpassword.stdout }}"
      db: BACKUP
      query: UPDATE ir_mail_server SET active = 'f'

  - name: Archive incoming mail servers
    postgresql_query:
      port: "{{ pgport.stdout }}"
      login_host: "{{ pghost.stdout }}"
      login_user: "{{ pguser.stdout }}"
      login_password: "{{ pgpassword.stdout }}"
      db: BACKUP
      query: UPDATE fetchmail_server SET active = 'f'
